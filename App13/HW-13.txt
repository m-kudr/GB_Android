Урок 13. Data Binding
Цель практической работы
Закрепить на практике навыки использования библиотеки Data Binding.

Что нужно сделать
Доработайте экран поиска из предыдущего практического задания. Добавьте в проект библиотеку Data Binding и реализуйте с её помощью автоматический поиск, который реагирует на ввод символов в поисковую строку.
При этом приложение должно соответствовать требованиям:
- На экране есть поисковая строка и TextView с надписью «Здесь будет отображаться результат запроса» или другим текстом на ваше усмотрение.
- Поиск невозможен, если в строке меньше трёх символов.
- Во время поиска (его имитации) отображается прогресс.
- После того как поиск завершён, прогресс исчезает и отображается текст «По запросу … (текст запроса) ничего не найдено».

Алгоритм работы
1. Подключите библиотеку Data Binding в файле build.gradle.
2. С помощью тегов <layout/>, <data/>,<variable/> определите в разметке фрагмента переменную ViewModel. У неё должен быть тип вашей вьюмодели из предыдущей практической работы.
3. Установите значение для этой переменной в функции onViewCreated фрагмента. Не забудьте установить LifecycleOwner, чтобы отображаемые данные могли обновляться автоматически.
4. Перенесите или реализуйте логику по отображению индикатора загрузки в разметку. Для этого, возможно, будет нужно импортировать класс, который описывает состояние вашей ViewModel, и класс View. Используйте нотацию "@{}".
5. Перенесите или реализуйте логику отображения текста «По запросу … (текст запроса) ничего не найдено» в разметку. Используйте "@{}". Вам может потребоваться слегка изменить состояния, например добавить в одно из них результат загрузки. В этом нет ничего страшного: при разработке часто приходится корректировать логику программы, ориентируясь на требования или используемые инструменты.
6. Удалите кнопку поиска. Вместо неё реализуйте автоматический поиск по вводимым символам. Используйте two-way databinding и нотацию "@={}": ваша поисковая строка должна и отображать данные из вьюмодели и отправлять их ей. Убедитесь, что вьюмодель обрабатывает вводимые символы и логика поиска не нарушена.
7. Чтобы сделать поиск эффективным, предусмотрите:
- Отмену предыдущего процесса поиска.
Если вам нужно инициировать новый поиск, а загрузка ещё не завершилась, процесс необходимо отменить. Это позволит избежать гонки и некорректной работы: например, когда второй поиск завершился раньше, чем первый (или завершился с ошибкой), и это привело к неверному отображению данных.
- Выполнение поиска с задержкой после ввода символа.
Вы могли заметить, что на этапе 6 поиск совершается при любом вводе или удалении символа. Это может привести к значительной трате ресурсов как приложения, так и сервера. Чтобы этого избежать, нужно использовать задержку после ввода каждого символа.
Считается, что комфортное время задержки для пользователя 300 мс. Если после ввода символов прошло больше времени, можно сделать вывод, что пользователь закончил ввод и пора начинать поиск. Если между символами интервал менее 300 мс — значит, пользователь всё ещё вводит поисковый запрос.
Задержку можно просто реализовать с помощью функции debounce.
Например,

searchString.debounce(300).onEach {
Log.d(“it”)
}.launchIn(viewModelScope)

будет выводить в консоль только те значения, после ввода которых прошло 300 мс.
- Ограничение поиска по количеству символов
Поисковый запрос должен содержать больше трёх символов. Это помогает отсечь бессмысленные запросы, которые не дают полезных результатов.
8. Не забудьте почистить код фрагмента. После подключения Data Binding некоторые листенеры и обработчики уже не нужны: библиотека берёт их работу на себя.


Что оценивается
1 Выполнены все пункты задания.
2. Приложение работает корректно.
3. Не нарушена логика работы приложения:
- экран содержит поисковую строку и TextView с результатом;
- во время поиска отображается прогресс;
- после того как поиск завершён, прогресс исчезает и отображается текст «По запросу … (текст запроса) ничего не найдено»;
- если повернуть экран после запуска поиска, поиск продолжается, а не прерывается;
- любое состояние экрана изменяется не при повороте, а только по результатам действий пользователя или выполнения запроса.
4. Data binding реализован корректно, нет дублирующего кода внутри фрагмента.
5. Код чистый, переменным и компонентам даны понятные названия, соблюдаются принципы ООП-.
6. В приложении реализован подход MVVM.

Как отправить работу на проверку
1. Используйте репозиторий android_dev_1_2022.
2. Скачайте изменения для репозитория.
3. Выполните работу в папке m13_databinding. Отправьте коммиты в удалённый репозиторий.

Ссылка на репозиторий.
https://gitlab.com/CEOmeleshenko/dpo_android_dev_1_2022

В ЭТОМ РЕПОЗИТОРИИ НЕТ ПАПКИ m13_databinding !!!
НЕ ПОНЯТНО КАК ДЕЛАТЬ ЗАДАНИЕ
