Урок 11. Основы хранения данных
Цели практической работы
Применить знания:
- по сохранению данных в памяти устройства;
- по созданию и применению паттерна «Репозиторий».


Что нужно сделать
Создадим одноэкранное приложение, которое позволяет вводить данные и записывать их в SharedPreference, а также отображать введённые данные даже после повторного открытия приложения.
1. Создайте экран произвольной вёрстки, аналогичный тому, который вы разрабатывали ранее со спикером, содержащий:
- поле для ввода текста (EditText);
- кнопку c текстом «Сохранить» (Button);
- кнопку с текстом «Очистить» (Button);
- текстовое поле (TextView).
2. Создайте класс Repository, который будет содержать несколько методов:
getDataFromSharedPreference(): String? — будет доставать значение из SharedPreference;
getDataFromLocalVariable(): String? — будет доставать значение, возвращать значение локальной переменной;
saveText(text: String) — будет записывать значения и в SharedPreference, и в локальную переменную.
clearText() — будет очищать значение и в SharedPreference, и в локальной переменной.
getText(): String — будет доставать значение из источников: сначала попытается взять значение локальной переменной; если оно null, то попытаемся взять значение из SharedPreference.
3. Создайте экземпляр класса репозитория в своём fragment/activity.
4. После нажатия кнопки «Сохранить» — возьмите текстовое значение из EditText и передайте его в метод saveText(text: String).
5. При нажатии кнопки «Очистить» — очистите значение в репозитории через метод clearText().
6. При открытии приложения или при изменении значения текст в TextView должен меняться.


Что оценивается
- Значение из EditText записывается в переменную и SharedPreference после нажатия на кнопку «Сохранить».
- После сохранения — текст в TextView меняется на тот, который ранее ввели в EditText.
- При повторном старте приложения отображается значение, которое мы записали.
- При нажатии кнопки «Очистить» значение в репозитории меняется на null, а TextView отображает « » (пустая строка).
- Нет багов и вылетов.
- Код чистый, у переменных и компонентов понятные названия, соблюдаются принципы ООП.


Советы и рекомендации
- Методы getDataFromSharedPreference() и getDataFromLocalVariable() должны быть приватными (private).
- Всё взаимодействие c репозиторием должно идти через методы saveText, getText и clearText.
- Если приложение не запускается, постарайтесь внимательно проанализировать информацию об ошибке и добавить нужное исправление.


Как отправить работу на проверку
1. Используйте репозиторий android_dev_1_2022.
2. Скачайте изменения в репозитории на ваш компьютер.
3. Выполните практическую работу в папке m11_timer_data_storage. Отправьте коммиты в удалённый репозиторий.

Ссылка на репозиторий.
https://gitlab.com/CEOmeleshenko/dpo_android_dev_1_2022

В ЭТОМ РЕПОЗИТОРИИ НЕТ ПАПКИ m11_timer_data_storage !!!
НЕ ПОНЯТНО КАК ДЕЛАТЬ ЗАДАНИЕ